{"ast":null,"code":"import _toConsumableArray from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux';\n\nfunction web3() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'WEB3_LOADED':\n      return _objectSpread({}, state, {\n        connection: action.connection\n      });\n\n    case 'WEB3_ACCOUNT_LOADED':\n      return _objectSpread({}, state, {\n        account: action.account\n      });\n\n    case 'ETHER_BALANCE_LOADED':\n      return _objectSpread({}, state, {\n        balance: action.balance\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction token() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'TOKEN_LOADED':\n      return _objectSpread({}, state, {\n        loaded: true,\n        contract: action.contract\n      });\n\n    case 'TOKEN_BALANCE_LOADED':\n      return _objectSpread({}, state, {\n        balance: action.balance\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction exchange() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var index, data;\n\n  switch (action.type) {\n    case 'EXCHANGE_LOADED':\n      return _objectSpread({}, state, {\n        loaded: true,\n        contract: action.contract\n      });\n\n    case 'CANCELLED_ORDERS_LOADED':\n      return _objectSpread({}, state, {\n        cancelledOrders: {\n          loaded: true,\n          data: action.cancelledOrders\n        }\n      });\n\n    case 'FILLED_ORDERS_LOADED':\n      return _objectSpread({}, state, {\n        filledOrders: {\n          loaded: true,\n          data: action.filledOrders\n        }\n      });\n\n    case 'ALL_ORDERS_LOADED':\n      return _objectSpread({}, state, {\n        allOrders: {\n          loaded: true,\n          data: action.allOrders\n        }\n      });\n\n    case 'ORDER_CANCELLING':\n      return _objectSpread({}, state, {\n        orderCancelling: true\n      });\n\n    case 'ORDER_CANCELLED':\n      return _objectSpread({}, state, {\n        orderCancelling: false,\n        cancelledOrders: _objectSpread({}, state.cancelledOrders, {\n          data: [].concat(_toConsumableArray(state.cancelledOrders.data), [action.order])\n        })\n      });\n\n    case 'ORDER_FILLING':\n      return _objectSpread({}, state, {\n        orderFilling: true\n      });\n\n    case 'ORDER_FILLED':\n      // Prevent duplicate orders\n      index = state.filledOrders.data.findIndex(function (order) {\n        return order.id === action.order.id;\n      });\n\n      if (index === -1) {\n        data = [].concat(_toConsumableArray(state.filledOrders.data), [action.order]);\n      } else {\n        data = state.filledOrders.data;\n      }\n\n      return _objectSpread({}, state, {\n        orderFilling: false,\n        filledOrders: _objectSpread({}, state.filledOrders, {\n          data: data\n        })\n      });\n\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\n      return _objectSpread({}, state, {\n        etherBalance: action.balance\n      });\n\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n      return _objectSpread({}, state, {\n        tokenBalance: action.balance\n      });\n\n    case 'BALANCES_LOADING':\n      return _objectSpread({}, state, {\n        balancesLoading: true\n      });\n\n    case 'BALANCES_LOADED':\n      return _objectSpread({}, state, {\n        balancesLoading: false\n      });\n\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n      return _objectSpread({}, state, {\n        etherDepositAmount: action.amount\n      });\n\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n      return _objectSpread({}, state, {\n        etherWithdrawAmount: action.amount\n      });\n\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n      return _objectSpread({}, state, {\n        tokenDepositAmount: action.amount\n      });\n\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n      return _objectSpread({}, state, {\n        tokenWithdrawAmount: action.amount\n      });\n\n    case 'BUY_ORDER_AMOUNT_CHANGED':\n      return _objectSpread({}, state, {\n        buyOrder: _objectSpread({}, state.buyOrder, {\n          amount: action.amount\n        })\n      });\n\n    case 'BUY_ORDER_PRICE_CHANGED':\n      return _objectSpread({}, state, {\n        buyOrder: _objectSpread({}, state.buyOrder, {\n          price: action.price\n        })\n      });\n\n    case 'BUY_ORDER_MAKING':\n      return _objectSpread({}, state, {\n        buyOrder: _objectSpread({}, state.buyOrder, {\n          amount: null,\n          price: null,\n          making: true\n        })\n      });\n\n    case 'ORDER_MADE':\n      // Prevent duplicate orders\n      index = state.allOrders.data.findIndex(function (order) {\n        return order.id === action.order.id;\n      });\n\n      if (index === -1) {\n        data = [].concat(_toConsumableArray(state.allOrders.data), [action.order]);\n      } else {\n        data = state.allOrders.data;\n      }\n\n      return _objectSpread({}, state, {\n        allOrders: _objectSpread({}, state.allOrders, {\n          data: data\n        }),\n        buyOrder: _objectSpread({}, state.buyOrder, {\n          making: false\n        }),\n        sellOrder: _objectSpread({}, state.sellOrder, {\n          making: false\n        })\n      });\n\n    case 'SELL_ORDER_AMOUNT_CHANGED':\n      return _objectSpread({}, state, {\n        sellOrder: _objectSpread({}, state.sellOrder, {\n          amount: action.amount\n        })\n      });\n\n    case 'SELL_ORDER_PRICE_CHANGED':\n      return _objectSpread({}, state, {\n        sellOrder: _objectSpread({}, state.sellOrder, {\n          price: action.price\n        })\n      });\n\n    case 'SELL_ORDER_MAKING':\n      return _objectSpread({}, state, {\n        sellOrder: _objectSpread({}, state.sellOrder, {\n          amount: null,\n          price: null,\n          making: true\n        })\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar rootReducer = combineReducers({\n  web3: web3,\n  token: token,\n  exchange: exchange\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/ai/Decentralized-Exchange/src/store/reducers.js"],"names":["combineReducers","web3","state","action","type","connection","account","balance","token","loaded","contract","exchange","index","data","cancelledOrders","filledOrders","allOrders","orderCancelling","order","orderFilling","findIndex","id","etherBalance","tokenBalance","balancesLoading","etherDepositAmount","amount","etherWithdrawAmount","tokenDepositAmount","tokenWithdrawAmount","buyOrder","price","making","sellOrder","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nfunction web3(state = {}, action) {\n    switch(action.type) {\n        case 'WEB3_LOADED':\n            return { ...state, connection: action.connection }\n        case 'WEB3_ACCOUNT_LOADED':\n            return { ...state, account: action.account }\n        case 'ETHER_BALANCE_LOADED':\n            return { ...state, balance: action.balance }\n        default: \n            return state;\n    }\n}\n\nfunction token(state = {}, action) {\n    switch(action.type) {\n        case 'TOKEN_LOADED':\n            return { ...state, loaded: true, contract: action.contract }\n        case 'TOKEN_BALANCE_LOADED':\n            return { ...state, balance: action.balance}\n        default:\n            return state\n    }\n}\n\nfunction exchange(state = {}, action) {\n    let index, data\n\n    switch(action.type) {\n        case 'EXCHANGE_LOADED':\n            return { ...state, loaded: true, contract: action.contract }\n\n        case 'CANCELLED_ORDERS_LOADED':\n            return { ...state, cancelledOrders: { loaded: true, data: action.cancelledOrders } }\n\n        case 'FILLED_ORDERS_LOADED':\n            return { ...state, filledOrders: { loaded: true, data: action.filledOrders } }\n\n        case 'ALL_ORDERS_LOADED':\n            return { ...state, allOrders: { loaded: true, data: action.allOrders } }\n\n        case 'ORDER_CANCELLING' :\n            return { ...state, orderCancelling: true }\n\n        case 'ORDER_CANCELLED' :\n            return {\n                ...state,\n                orderCancelling: false,\n                cancelledOrders: {\n                    ...state.cancelledOrders,\n                    data: [\n                        ...state.cancelledOrders.data,\n                        action.order\n                    ]\n                }\n            }\n\n        case 'ORDER_FILLING' :\n            return { ...state, orderFilling: true }\n\n        case 'ORDER_FILLED' :\n            // Prevent duplicate orders\n            index = state.filledOrders.data.findIndex(order => order.id === action.order.id);\n            if(index === -1) {\n                data = [...state.filledOrders.data, action.order]\n            } else {\n                data = state.filledOrders.data\n            }\n            return {\n                ...state,\n                orderFilling: false,\n                filledOrders: {\n                    ...state.filledOrders,\n                    data\n                }\n            }\n\n        case 'EXCHANGE_ETHER_BALANCE_LOADED':\n            return { ...state, etherBalance: action.balance }\n\n        case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n            return { ...state, tokenBalance: action.balance }\n\n        case 'BALANCES_LOADING':\n            return { ...state, balancesLoading: true }\n\n        case 'BALANCES_LOADED':\n            return { \n                ...state, \n                balancesLoading: false,\n            }\n\n        case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n            return { ...state, etherDepositAmount: action.amount }\n\n        case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n            return { ...state, etherWithdrawAmount: action.amount }\n\n        case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n            return { ...state, tokenDepositAmount: action.amount }\n\n        case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n            return { ...state, tokenWithdrawAmount: action.amount }\n\n        case 'BUY_ORDER_AMOUNT_CHANGED':\n            return { ...state, buyOrder: { ...state.buyOrder, amount: action.amount } }\n\n        case 'BUY_ORDER_PRICE_CHANGED':\n            return { ...state, buyOrder: { ...state.buyOrder, price: action.price } }\n\n        case 'BUY_ORDER_MAKING':\n            return { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true } }\n\n        case 'ORDER_MADE':\n             // Prevent duplicate orders\n            index = state.allOrders.data.findIndex(order => order.id === action.order.id);\n\n            if(index === -1) {\n                data = [...state.allOrders.data, action.order]\n            } else {\n                data = state.allOrders.data\n            }\n            return {\n                ...state,\n                allOrders: {\n                ...state.allOrders,\n                data\n                },\n                buyOrder: {\n                ...state.buyOrder,\n                making: false\n                },\n                sellOrder: {\n                ...state.sellOrder,\n                making: false\n                }\n            }\n\n        case 'SELL_ORDER_AMOUNT_CHANGED':\n            return { ...state, sellOrder: { ...state.sellOrder, amount: action.amount } }\n\n        case 'SELL_ORDER_PRICE_CHANGED':\n            return { ...state, sellOrder: { ...state.sellOrder, price: action.price } }\n\n        case 'SELL_ORDER_MAKING':\n            return { ...state, sellOrder: { ...state.sellOrder, amount: null, price: null, making: true } }\n\n        default: \n            return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    web3,\n    token,\n    exchange\n})\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}