{"ast":null,"code":"import _regeneratorRuntime from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ai/Decentralized-Exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ai/Decentralized-Exchange/src/components/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { loadWeb3, loadAccount, loadToken, loadExchange } from '../store/interactions';\nimport Navbar from './Navbar';\nimport Content from './Content';\nimport { contractsLoadedSelector } from '../store/selectors';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    // Load blockchain before rendering component\n    value: function componentWillMount() {\n      this.loadBlockchainData(this.props.dispatch);\n    } // Connect to blockchain via Web3\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var web3, networkId, token, exchange;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = loadWeb3(dispatch);\n                _context.next = 3;\n                return web3.eth.net.getNetworkType();\n\n              case 3:\n                _context.next = 5;\n                return web3.eth.net.getId();\n\n              case 5:\n                networkId = _context.sent;\n                _context.next = 8;\n                return loadAccount(web3, dispatch);\n\n              case 8:\n                _context.next = 10;\n                return loadToken(web3, networkId, dispatch);\n\n              case 10:\n                token = _context.sent;\n\n                if (token) {\n                  _context.next = 14;\n                  break;\n                }\n\n                window.alert('Token smart contract not detected on the current network. Please select another network with Metamask.');\n                return _context.abrupt(\"return\");\n\n              case 14:\n                _context.next = 16;\n                return loadExchange(web3, networkId, dispatch);\n\n              case 16:\n                exchange = _context.sent;\n\n                if (exchange) {\n                  _context.next = 20;\n                  break;\n                }\n\n                window.alert('Exchange smart contract not detected on the current network. Please select another network with Metamask.');\n                return _context.abrupt(\"return\");\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadBlockchainData(_x) {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var contractsLoaded = this.props.contractsLoaded;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), contractsLoaded ? React.createElement(Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    contractsLoaded: contractsLoadedSelector(state)\n  };\n}\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["/home/ai/Decentralized-Exchange/src/components/App.js"],"names":["React","Component","connect","loadWeb3","loadAccount","loadToken","loadExchange","Navbar","Content","contractsLoadedSelector","App","loadBlockchainData","props","dispatch","web3","eth","net","getNetworkType","getId","networkId","token","window","alert","exchange","contractsLoaded","mapStateToProps","state"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,QADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,YAJF,QAKO,uBALP;AAMA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,uBAAT,QAAwC,oBAAxC;;IAEMC,G;;;;;;;;;;;;;AAEJ;yCACqB;AACnB,WAAKC,kBAAL,CAAwB,KAAKC,KAAL,CAAWC,QAAnC;AACD,K,CAED;;;;;;;gDACyBA,Q;;;;;;AACjBC,gBAAAA,I,GAAOX,QAAQ,CAACU,QAAD,C;;uBACfC,IAAI,CAACC,GAAL,CAASC,GAAT,CAAaC,cAAb,E;;;;uBACkBH,IAAI,CAACC,GAAL,CAASC,GAAT,CAAaE,KAAb,E;;;AAAlBC,gBAAAA,S;;uBACAf,WAAW,CAACU,IAAD,EAAOD,QAAP,C;;;;uBACGR,SAAS,CAACS,IAAD,EAAOK,SAAP,EAAkBN,QAAlB,C;;;AAAvBO,gBAAAA,K;;oBACFA,K;;;;;AACFC,gBAAAA,MAAM,CAACC,KAAP,CAAa,wGAAb;;;;;uBAGqBhB,YAAY,CAACQ,IAAD,EAAOK,SAAP,EAAkBN,QAAlB,C;;;AAA7BU,gBAAAA,Q;;oBACFA,Q;;;;;AACFF,gBAAAA,MAAM,CAACC,KAAP,CAAa,2GAAb;;;;;;;;;;;;;;;;;;;6BAKK;AAAA,UACCE,eADD,GACqB,KAAKZ,KAD1B,CACCY,eADD;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEIA,eAAe,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAiB;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFpC,CADF;AAMD;;;;EAjCevB,S;;AAoClB,SAASwB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLF,IAAAA,eAAe,EAAEf,uBAAuB,CAACiB,KAAD;AADnC,GAAP;AAGD;;AAED,eAAexB,OAAO,CAACuB,eAAD,CAAP,CAAyBf,GAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport {\n  loadWeb3,\n  loadAccount,\n  loadToken,\n  loadExchange\n} from '../store/interactions';\nimport Navbar from './Navbar';\nimport Content from './Content';\nimport { contractsLoadedSelector } from '../store/selectors';\n\nclass App extends Component {\n  \n  // Load blockchain before rendering component\n  componentWillMount() {\n    this.loadBlockchainData(this.props.dispatch);\n  }\n\n  // Connect to blockchain via Web3\n  async loadBlockchainData(dispatch) {\n    const web3 = loadWeb3(dispatch);\n    await web3.eth.net.getNetworkType()\n    const networkId = await web3.eth.net.getId(); // Allow to fetch contract data despite the network type\n    await loadAccount(web3, dispatch); // Fetch accounts provided via Metamask\n    const token = await loadToken(web3, networkId, dispatch)\n    if(!token) {\n      window.alert('Token smart contract not detected on the current network. Please select another network with Metamask.')\n      return\n    }\n    const exchange = await loadExchange(web3, networkId, dispatch)\n    if(!exchange) {\n      window.alert('Exchange smart contract not detected on the current network. Please select another network with Metamask.')\n      return\n    }\n  }\n\n  render() {\n    const { contractsLoaded } = this.props;\n    return (\n      <div>\n        <Navbar />\n        { contractsLoaded ? <Content /> : <div className=\"content\"></div> }\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    contractsLoaded: contractsLoadedSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n\n"]},"metadata":{},"sourceType":"module"}